#[allow(unused_imports)]
use micromath::F32Ext as _;

// Generated using Python:
//
// ```
// import math
//
// for i in range(256):
//     min = -40
//     max = 0
//     diff = max - min
//     db = min + (i / 255) * diff
//     print("{},".format(pow(10, db / 20)))
// ```
const DB_TO_LINEAR: [f32; 256] = [
    0.01,
    0.010_182_235,
    0.010_367_792,
    0.010_556_729_5,
    0.010_749_111,
    0.010_944_998,
    0.011_144_455,
    0.011_347_546,
    0.011_554_339,
    0.011_764_9,
    0.011_979_298,
    0.012_197_603_5,
    0.012_419_887,
    0.012_646_222,
    0.012_876_68,
    0.013_111_339,
    0.013_350_274,
    0.013_593_564,
    0.013_841_287,
    0.014_093_524,
    0.014_350_358,
    0.014_611_873,
    0.014_878_153,
    0.015_149_286,
    0.015_425_36,
    0.015_706_465,
    0.015_992_692,
    0.016_284_136,
    0.016_580_89,
    0.016_883_053,
    0.017_190_723,
    0.017_503_997,
    0.017_822_983,
    0.018_147_781,
    0.018_478_498,
    0.018_815_242,
    0.019_158_123,
    0.019_507_252,
    0.019_862_743,
    0.020_224_713,
    0.020_593_278,
    0.020_968_56,
    0.021_350_682,
    0.021_739_768,
    0.022_135_943,
    0.022_539_34,
    0.022_950_087,
    0.023_368_318,
    0.023_794_172,
    0.024_227_785,
    0.024_669_303,
    0.025_118_865,
    0.025_576_62,
    0.026_042_717,
    0.026_517_307,
    0.027_000_546,
    0.027_492_592,
    0.027_993_605,
    0.028_503_748,
    0.029_023_187,
    0.029_552_093,
    0.030_090_636,
    0.030_638_995,
    0.031_197_347,
    0.031_765_87,
    0.032_344_76,
    0.032_934_196,
    0.033_534_374,
    0.034_145_49,
    0.034_767_74,
    0.035_401_333,
    0.036_046_47,
    0.036_703_367,
    0.037_372_23,
    0.038_053_285,
    0.038_746_75,
    0.039_452_855,
    0.040_171_824,
    0.040_903_9,
    0.041_649_31,
    0.042_408_31,
    0.043_181_14,
    0.043_968_055,
    0.044_769_31,
    0.045_585_167,
    0.046_415_888,
    0.047_261_752,
    0.048_123_028,
    0.049,
    0.049_892_955,
    0.050_802_18,
    0.051_727_977,
    0.052_670_643,
    0.053_630_49,
    0.054_607_827,
    0.055_602_975,
    0.056_616_26,
    0.057_648_01,
    0.058_698_56,
    0.059_768_256,
    0.060_857_445,
    0.061_966_486,
    0.063_095_73,
    0.064_245_56,
    0.065_416_34,
    0.066_608_466,
    0.067_822_31,
    0.069_058_27,
    0.070_316_754,
    0.071_598_18,
    0.072_902_95,
    0.074_231_5,
    0.075_584_26,
    0.076_961_674,
    0.078_364_186,
    0.079_792_26,
    0.081_246_36,
    0.082_726_955,
    0.084_234_536,
    0.085_769_586,
    0.087_332_614,
    0.088_924_125,
    0.090_544_64,
    0.092_194_684,
    0.093_874_8,
    0.095_585_53,
    0.097_327_44,
    0.099_101_09,
    0.100_907_065,
    0.102_745_95,
    0.104_618_34,
    0.106_524_86,
    0.108_466_126,
    0.110_442_76,
    0.112_455_42,
    0.114_504_755,
    0.116_591_44,
    0.118_716_15,
    0.120_879_58,
    0.123_082_44,
    0.125_325_43,
    0.127_609_31,
    0.129_934_8,
    0.132_302_67,
    0.134_713_7,
    0.137_168_66,
    0.139_668_36,
    0.142_213_61,
    0.144_805_25,
    0.147_444_11,
    0.150_131_08,
    0.152_866_99,
    0.155_652_78,
    0.158_489_32,
    0.161_377_56,
    0.164_318_43,
    0.167_312_89,
    0.170_361_94,
    0.173_466_53,
    0.176_627_71,
    0.179_846_48,
    0.183_123_93,
    0.186_461_09,
    0.189_859_08,
    0.193_319,
    0.196_841_94,
    0.200_429_1,
    0.204_081_64,
    0.207_800_73,
    0.211_587_6,
    0.215_443_46,
    0.219_369_62,
    0.223_367_3,
    0.227_437_85,
    0.231_582_58,
    0.235_802_83,
    0.240_1,
    0.244_475_47,
    0.248_930_68,
    0.253_467_08,
    0.258_086_14,
    0.262_789_4,
    0.267_578_36,
    0.272_454_6,
    0.277_419_7,
    0.282_475_23,
    0.287_622_96,
    0.292_864_44,
    0.298_201_47,
    0.303_635_78,
    0.309_169_08,
    0.314_803_24,
    0.320_540_1,
    0.326_381_47,
    0.332_329_3,
    0.338_385_52,
    0.344_552_1,
    0.350_831_06,
    0.357_224_46,
    0.363_734_33,
    0.370_362_88,
    0.377_112_2,
    0.383_984_54,
    0.390_982_1,
    0.398_107_17,
    0.405_362_1,
    0.412_749_23,
    0.420_270_98,
    0.427_929_82,
    0.435_728_22,
    0.443_668_72,
    0.451_753_94,
    0.459_986_5,
    0.468_369_1,
    0.476_904_45,
    0.485_595_35,
    0.494_444_6,
    0.503_455_16,
    0.512_629_87,
    0.521_971_8,
    0.531_484,
    0.541_169_5,
    0.551_031_53,
    0.561_073_3,
    0.571_298_06,
    0.581_709_15,
    0.592_309_95,
    0.603_103_94,
    0.614_094_6,
    0.625_285_6,
    0.636_680_54,
    0.648_283_1,
    0.660_097_1,
    0.672_126_4,
    0.684_375,
    0.696_846_7,
    0.709_545_73,
    0.722_476_2,
    0.735_642_25,
    0.749_048_3,
    0.762_698_6,
    0.776_597_7,
    0.790_75,
    0.805_160_3,
    0.819_833_16,
    0.834_773_4,
    0.849_985_96,
    0.865_475_8,
    0.881_247_76,
    0.897_307_3,
    0.913_659_4,
    0.930_309_5,
    0.947_263,
    0.964_525_5,
    0.982_102_63,
    1.0,
];

// Generated using Python:
//
// ```
// import math
//
// for i in range(256):
//     min = 0.2
//     max = 40
//     diff = max - min
//     x = min + (i / 255) * diff
//     print("{},".format(20 * math.log10(x)))
// ```
const LINEAR_TO_DB: [f32; 256] = [
    -13.979_4,
    -8.969_087,
    -5.811_94,
    -3.501_412,
    -1.678_149_3,
    -0.172_003_43,
    1.111_164,
    2.228_940_5,
    3.219_134_3,
    4.107_908_7,
    4.914_123,
    5.651_82,
    6.331_739_4,
    6.962_278,
    7.550_124_6,
    8.100_697,
    8.618_44,
    9.107_05,
    9.569_633,
    10.008_82,
    10.426_865,
    10.825_71,
    11.207_043,
    11.572_335,
    11.922_883,
    12.259_83,
    12.584_193,
    12.896_878,
    13.198_697,
    13.490_378,
    13.772_583,
    14.045_907,
    14.310_891,
    14.568_03,
    14.817_776,
    15.060_54,
    15.296_703,
    15.526_616,
    15.750_599,
    15.968_95,
    16.181_948,
    16.389_847,
    16.592_886,
    16.791_286,
    16.985_256,
    17.174_99,
    17.360_666,
    17.542_456,
    17.720_52,
    17.895_006,
    18.066_057,
    18.233_803,
    18.398_37,
    18.559_88,
    18.718_44,
    18.874_157,
    19.027_132,
    19.177_458,
    19.325_228,
    19.470_526,
    19.613_432,
    19.754_026,
    19.892_38,
    20.028_564,
    20.162_647,
    20.294_693,
    20.424_759,
    20.552_908,
    20.679_192,
    20.803_667,
    20.926_384,
    21.047_39,
    21.166_735,
    21.284_46,
    21.400_612,
    21.515_232,
    21.628_359,
    21.740_03,
    21.850_285,
    21.959_158,
    22.066_683,
    22.172_892,
    22.277_819,
    22.381_493,
    22.483_946,
    22.585_201,
    22.685_293,
    22.784_243,
    22.882_078,
    22.978_825,
    23.074_505,
    23.169_142,
    23.262_76,
    23.355_38,
    23.447_021,
    23.537_706,
    23.627_455,
    23.716_286,
    23.804_216,
    23.891_266,
    23.977_453,
    24.062_792,
    24.147_3,
    24.230_995,
    24.313_892,
    24.396_004,
    24.477_346,
    24.557_936,
    24.637_783,
    24.716_904,
    24.795_31,
    24.873_014,
    24.950_031,
    25.026_37,
    25.102_043,
    25.177_063,
    25.251_442,
    25.325_188,
    25.398_314,
    25.470_827,
    25.542_742,
    25.614_067,
    25.684_809,
    25.754_982,
    25.824_59,
    25.893_646,
    25.962_156,
    26.030_132,
    26.097_58,
    26.164_507,
    26.230_923,
    26.296_833,
    26.362_25,
    26.427_176,
    26.491_621,
    26.555_59,
    26.619_093,
    26.682_133,
    26.744_72,
    26.806_86,
    26.868_559,
    26.929_821,
    26.990_654,
    27.051_065,
    27.111_06,
    27.170_64,
    27.229_816,
    27.288_591,
    27.346_972,
    27.404_963,
    27.462_568,
    27.519_796,
    27.576_647,
    27.633_13,
    27.689_247,
    27.745_005,
    27.800_406,
    27.855_455,
    27.910_16,
    27.964_521,
    28.018_543,
    28.072_233,
    28.125_593,
    28.178_627,
    28.231_339,
    28.283_731,
    28.335_812,
    28.387_58,
    28.439_043,
    28.490_202,
    28.541_061,
    28.591_625,
    28.641_897,
    28.691_88,
    28.741_575,
    28.790_989,
    28.840_122,
    28.888_979,
    28.937_563,
    28.985_876,
    29.033_922,
    29.081_705,
    29.129_227,
    29.176_489,
    29.223_495,
    29.270_248,
    29.316_751,
    29.363_007,
    29.409_018,
    29.454_784,
    29.500_313,
    29.545_603,
    29.590_66,
    29.635_483,
    29.680_077,
    29.724_442,
    29.768_581,
    29.812_498,
    29.856_194,
    29.899_67,
    29.942_93,
    29.985_977,
    30.028_81,
    30.071_434,
    30.113_85,
    30.156_06,
    30.198_065,
    30.239_868,
    30.281_471,
    30.322_876,
    30.364_084,
    30.405_096,
    30.445_917,
    30.486_547,
    30.526_989,
    30.567_242,
    30.607_31,
    30.647_192,
    30.686_893,
    30.726_414,
    30.765_757,
    30.804_92,
    30.843_908,
    30.882_723,
    30.921_366,
    30.959_835,
    30.998_137,
    31.036_268,
    31.074_234,
    31.112_036,
    31.149_672,
    31.187_147,
    31.224_46,
    31.261_614,
    31.298_61,
    31.335_45,
    31.372_131,
    31.408_66,
    31.445_038,
    31.481_26,
    31.517_336,
    31.553_259,
    31.589_037,
    31.624_666,
    31.660_15,
    31.695_49,
    31.730_686,
    31.765_741,
    31.800_655,
    31.835_43,
    31.870_066,
    31.904_562,
    31.938_925,
    31.973_15,
    32.007_24,
    32.041_2,
];

pub fn db_to_linear(db: f32) -> f32 {
    const MIN_DB: f32 = -40.0;
    const MAX_DB: f32 = 1.0;

    if db < MIN_DB {
        return DB_TO_LINEAR[0];
    }

    let phase = (db - MIN_DB) / (MAX_DB - MIN_DB);
    let phase = phase * 256.0;
    let index = phase as usize;
    if index >= 255 {
        return DB_TO_LINEAR[255];
    }

    let a = DB_TO_LINEAR[index];
    let b = DB_TO_LINEAR[index + 1];
    a + (b - a) * phase.fract()
}

// XXX: This does not work on values lower than 0.2, make sure
// that it is used in a context where the input is always higher.
pub fn linear_to_db(x: f32) -> f32 {
    const MIN_LINEAR: f32 = 0.2;
    const MAX_LINEAR: f32 = 40.0;

    if x < MIN_LINEAR {
        return LINEAR_TO_DB[0];
    }

    let phase = (x - MIN_LINEAR) / (MAX_LINEAR - MIN_LINEAR);
    let phase = phase * 256.0;
    let index = phase as usize;
    if index >= 255 {
        return LINEAR_TO_DB[255];
    }

    let a = LINEAR_TO_DB[index];
    let b = LINEAR_TO_DB[index + 1];
    a + (b - a) * phase.fract()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn db_to_linear_lookup_matches() {
        let min = -40.0;
        let max = 0.0;
        for i in 0..=1024 {
            let db = min + (i as f32 / 1024.0) * (max - min);
            let expected_lin = f32::powf(10.0, db / 20.0);
            assert_relative_eq!(db_to_linear(db), expected_lin, max_relative = 0.1);
        }
    }

    #[test]
    fn db_to_linear_lookup_below_bottom_limit() {
        assert_relative_eq!(db_to_linear(-100.0), 0.01, epsilon = 0.0001);
    }

    #[test]
    fn db_to_linear_lookup_above_bottom_limit() {
        assert_relative_eq!(db_to_linear(-39.99999), 0.01, epsilon = 0.0001);
    }

    #[test]
    fn db_to_linear_lookup_above_top_limit() {
        assert_relative_eq!(db_to_linear(0.99999), 1.0, epsilon = 0.0001);
    }

    #[test]
    fn db_to_linear_lookup_below_top_limit() {
        assert_relative_eq!(db_to_linear(10.0), 1.0, epsilon = 0.0001);
    }

    #[test]
    fn linear_to_db_lookup_matches() {
        let min = 0.2;
        let max = 40.0;
        for i in 0..=1024 {
            let x = min + (i as f32 / 1024.0) * (max - min);
            let expected_db = 20.0 * f32::log10(x);
            assert_relative_eq!(linear_to_db(x), expected_db, max_relative = 0.15);
        }
    }

    #[test]
    fn linear_to_db_lookup_below_bottom_limit() {
        assert_relative_eq!(linear_to_db(0.0), LINEAR_TO_DB[0], epsilon = 0.0001);
    }

    #[test]
    fn linear_to_db_lookup_above_bottom_limit() {
        assert_relative_eq!(linear_to_db(-39.99999), LINEAR_TO_DB[0], epsilon = 0.0001);
    }

    #[test]
    fn linear_to_db_lookup_above_top_limit() {
        assert_relative_eq!(
            linear_to_db(39.99999),
            LINEAR_TO_DB[LINEAR_TO_DB.len() - 1],
            epsilon = 0.0001
        );
    }

    #[test]
    fn linear_to_db_lookup_below_top_limit() {
        assert_relative_eq!(
            linear_to_db(100.0),
            LINEAR_TO_DB[LINEAR_TO_DB.len() - 1],
            epsilon = 0.0001
        );
    }
}
